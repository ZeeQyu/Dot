/* Generated by the Nim Compiler v0.12.0 */
/*   (c) 2015 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI17006 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI17004 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI11465 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3485 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3436 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
var NNI3436 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3436.node = NNI3436;
NTI3485.base = NTI3424;
var NNI3424 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3485, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3436.base = NTI3424;
NTI3440.base = NTI3436;
var NNI11465 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI11465.node = NNI11465;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3438.base = NTI3436;
var NNI17004 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "botName", len: 0, typ: NTI140, name: "botName", sons: null}, 
{kind: 1, offset: "callable", len: 0, typ: NTI17006, name: "callable", sons: null}]};
NTI17004.node = NNI17004;
NTI17004.base = NTI3408;
var nimvm_5551 = 0;
var nim_program_result = 0;
var globalraisehook_9813 = [null];
var localraisehook_9818 = [null];
var outofmemhook_9821 = [null];
function cstrToNimstr(c_12291) {
    var result = [];
    for (var i = 0; i < c_12291.length; ++i) {
      result[i] = c_12291.charCodeAt(i);
    }
    result[result.length] = 0; // terminating zero
    return result;
  }
function arrayConstr(len_13467, value_13468, typ_13469) {
    var result = new Array(len_13467);
    for (var i = 0; i < len_13467; ++i) result[i] = nimCopy(null, value_13468, typ_13469);
    return result;
  }
function SetConstr() {
    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  }
function isfatpointer_13099(ti_13101) {
var result_13102 = false;
BeforeRet: do {
result_13102 = !((SetConstr(17, 16, 4, 18, 27, 19, 23, 22, 21)[ti_13101.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_13102;
}
function nimCopyAux(dest_13121, src_13122, n_13124) {
switch (n_13124.kind) {
case 0: 
break;
case 1:       dest_13121[n_13124.offset] = nimCopy(dest_13121[n_13124.offset], src_13122[n_13124.offset], n_13124.typ);
    
break;
case 2: L1: do {
var i_13415 = 0;
var HEX3Atmp_13417 = 0;
HEX3Atmp_13417 = (n_13124.len - 1);
var res_13420 = 0;
L2: do {
L3: while (true) {
if (!(res_13420 <= HEX3Atmp_13417)) break L3;
i_13415 = res_13420;
nimCopyAux(dest_13121, src_13122, n_13124.sons[i_13415]);
res_13420 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_13121[n_13124.offset] = nimCopy(dest_13121[n_13124.offset], src_13122[n_13124.offset], n_13124.typ);
      for (var i = 0; i < n_13124.sons.length; ++i) {
        nimCopyAux(dest_13121, src_13122, n_13124.sons[i][1]);
      }
    
break;
}
}
function nimCopy(dest_13116, src_13117, ti_13118) {
var result_13429 = null;
switch (ti_13118.kind) {
case 21: case 22: case 23: case 5: if (!(isfatpointer_13099(ti_13118))) {
result_13429 = src_13117;
}
else {
result_13429 = [src_13117[0], src_13117[1]];}


break;
case 19:       if (dest_13116 === null || dest_13116 === undefined) {
        dest_13116 = {};
      }
      else {
        for (var key in dest_13116) { delete dest_13116[key]; }
      }
      for (var key in src_13117) { dest_13116[key] = src_13117[key]; }
      result_13429 = dest_13116;
    
break;
case 18: case 17: if (!((ti_13118.base == null))) {
result_13429 = nimCopy(dest_13116, src_13117, ti_13118.base);
}
else {
if ((ti_13118.kind == 17)) {
result_13429 = (dest_13116 === null || dest_13116 === undefined) ? {m_type: ti_13118} : dest_13116;}
else {
result_13429 = (dest_13116 === null || dest_13116 === undefined) ? {} : dest_13116;}
}
nimCopyAux(result_13429, src_13117, ti_13118.node);

break;
case 24: case 4: case 27: case 16:       if (dest_13116 === null || dest_13116 === undefined) {
        dest_13116 = new Array(src_13117.length);
      }
      else {
        dest_13116.length = src_13117.length;
      }
      result_13429 = dest_13116;
      for (var i = 0; i < src_13117.length; ++i) {
        result_13429[i] = nimCopy(result_13429[i], src_13117[i], ti_13118.base);
      }
    
break;
case 28:       if (src_13117 !== null) {
        result_13429 = src_13117.slice(0);
      }
    
break;
default: 
result_13429 = src_13117;
break;
}
return result_13429;
}
function add_9836(x_9839, x_9839_Idx, y_9840) {
var F={procname:"system.add",prev:framePtr,filename:"lib/nim/system.nim",line:0};
framePtr = F;
      var len = x_9839[0].length-1;
      for (var i = 0; i < y_9840.length; ++i) {
        x_9839[0][len] = y_9840.charCodeAt(i);
        ++len;
      }
      x_9839[0][len] = 0
    framePtr = framePtr.prev;
}
function auxwritestacktrace_11460(f_11462) {
var Tmp3;
var result_11463 = [null];
var it_11469 = f_11462;
var i_11470 = 0;
var total_11471 = 0;
var tempframes_11475 = arrayConstr(64, {Field0: null, Field1: 0}, NTI11465);
L1: do {
L2: while (true) {
if (!!((it_11469 == null))) Tmp3 = false; else {Tmp3 = (i_11470 <= 63); }if (!Tmp3) break L2;
tempframes_11475[i_11470].Field0 = it_11469.procname;
tempframes_11475[i_11470].Field1 = it_11469.line;
i_11470 += 1;
total_11471 += 1;
it_11469 = it_11469.prev;
}
} while(false);
L4: do {
L5: while (true) {
if (!!((it_11469 == null))) break L5;
total_11471 += 1;
it_11469 = it_11469.prev;
}
} while(false);
result_11463[0] = cstrToNimstr("");
if (!((total_11471 == i_11470))) {
if (result_11463[0] != null) { result_11463[0] = (result_11463[0].slice(0, -1)).concat(cstrToNimstr("(")); } else { result_11463[0] = cstrToNimstr("(");};
if (result_11463[0] != null) { result_11463[0] = (result_11463[0].slice(0, -1)).concat(cstrToNimstr(((total_11471 - i_11470))+"")); } else { result_11463[0] = cstrToNimstr(((total_11471 - i_11470))+"");};
if (result_11463[0] != null) { result_11463[0] = (result_11463[0].slice(0, -1)).concat(cstrToNimstr(" calls omitted) ...\x0A")); } else { result_11463[0] = cstrToNimstr(" calls omitted) ...\x0A");};
}

L6: do {
var j_11615 = 0;
var HEX3Atmp_11621 = 0;
HEX3Atmp_11621 = (i_11470 - 1);
var res_11624 = HEX3Atmp_11621;
L7: do {
L8: while (true) {
if (!(0 <= res_11624)) break L8;
j_11615 = res_11624;
add_9836(result_11463, 0, tempframes_11475[j_11615].Field0);
if ((0 < tempframes_11475[j_11615].Field1)) {
if (result_11463[0] != null) { result_11463[0] = (result_11463[0].slice(0, -1)).concat(cstrToNimstr(", line: ")); } else { result_11463[0] = cstrToNimstr(", line: ");};
if (result_11463[0] != null) { result_11463[0] = (result_11463[0].slice(0, -1)).concat(cstrToNimstr((tempframes_11475[j_11615].Field1)+"")); } else { result_11463[0] = cstrToNimstr((tempframes_11475[j_11615].Field1)+"");};
}

if (result_11463[0] != null) { result_11463[0] = (result_11463[0].slice(0, -1)).concat(cstrToNimstr("\x0A")); } else { result_11463[0] = cstrToNimstr("\x0A");};
res_11624 -= 1;
}
} while(false);
} while(false);
return result_11463[0];
}
function rawwritestacktrace_11628() {
var result_11630 = null;
if (!((framePtr == null))) {
result_11630 = (cstrToNimstr("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxwritestacktrace_11460(framePtr));
framePtr = null;
}
else {
if (!((lastJSError == null))) {
result_11630 = cstrToNimstr(lastJSError.stack);
}
else {
result_11630 = cstrToNimstr("No stack traceback available\x0A");
}
}
return result_11630;
}
function unhandledException(e_11658) {
var buf_11801 = rawwritestacktrace_11628();
}
function raiseException(e_11805, ename_11806) {
e_11805.name = ename_11806;
if ((excHandler == 0)) {
unhandledException(e_11805);
}

throw e_11805;}
function raiseOverflow() {
var e_12211 = null;
e_12211 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null};
e_12211.message = cstrToNimstr("over- or underflow");
raiseException(e_12211, "OverflowError");
}
function raiseDivByZero() {
var e_12227 = null;
e_12227 = {m_type: NTI3438, parent: null, name: null, message: null, trace: null};
e_12227.message = cstrToNimstr("division by zero");
raiseException(e_12227, "DivByZeroError");
}
var exported = {m_type: NTI17004, botName: null, callable: null};
exported.botName = "Strawberry";
exported.callable = console.log;
exports.nim = exportedfunction alloc0_7217(size_7219) {
var result_11041 = null;
var F={procname:"system.alloc0",prev:framePtr,filename:"lib/nim/system.nim",line:0};
framePtr = F;
framePtr = framePtr.prev;
return [result_11041, result_11041_Idx];
}
var d_17021 = /**/[alloc0_7217(12)];
Gcunref_9650(d_17021[0].Field2);
