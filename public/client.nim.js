/* Generated by the Nim Compiler v0.20.2 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var nim_program_result = 0;
var global_raise_hook_18618 = [null];
var local_raise_hook_18623 = [null];
var out_of_mem_hook_18626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_159237 = [0];
var game = null;

function preload_game_177041() {
	var F={procname:"clientGame.preloadGame",prev:framePtr,filename:"clientGame.nim",line:0};
	framePtr = F;
		game.load.image(("background"), ("img/background-texture.png"));
	framePtr = F.prev;

	
}

function create_game_177074() {
	var F={procname:"clientGame.createGame",prev:framePtr,filename:"clientGame.nim",line:0};
	framePtr = F;
		F.line = 13;
		game.add.tileSprite((0), (0), (4000), (4000), ("background"));
	framePtr = F.prev;

	
}

function render_game_177132() {
	var F={procname:"clientGame.renderGame",prev:framePtr,filename:"clientGame.nim",line:0};
	framePtr = F;
	framePtr = F.prev;

	
}

function update_game_177147() {
	var F={procname:"clientGame.updateGame",prev:framePtr,filename:"clientGame.nim",line:0};
	framePtr = F;
		F.line = 19;
		console.log("Running");
	framePtr = F.prev;

	
}

function throw_176085(error_text_176087) {
	var F={procname:"utility.throw",prev:framePtr,filename:"utility.nim",line:0};
	framePtr = F;
		F.line = 20;
		var error = error_text_176087;
		F.line = 21;
		throw error;
	framePtr = F.prev;

	
}

function on_connect_178060() {
	var F={procname:"client.onConnect",prev:framePtr,filename:"client.nim",line:0};
	framePtr = F;
		F.line = 18;
		console.log("Connected");
	framePtr = F.prev;

	
}

function on_random_message_178119(data_178121) {
	var F={procname:"client.onRandomMessage",prev:framePtr,filename:"client.nim",line:0};
	framePtr = F;
		F.line = 27;
		console.log(("Random stream: " + (data_178121.rand)));
	framePtr = F.prev;

	
}

function on_subscribe_fail_178075(err_178077) {
	var F={procname:"client.onSubscribeFail",prev:framePtr,filename:"client.nim",line:0};
	framePtr = F;
		F.line = 21;
		console.log(("Failed to subscribe to the channel due to error: " + (err_178077)));
	framePtr = F.prev;

	
}

function on_sample_channel_178097(num_178099) {
	var F={procname:"client.onSampleChannel",prev:framePtr,filename:"client.nim",line:0};
	framePtr = F;
		F.line = 24;
		console.log(("Sample channel message: " + (num_178099)));
	framePtr = F.prev;

	
}

function HEX3Aanonymous_178144() {

		function inner_178162() {
			var result_178164 = null;

			var F={procname:":anonymous.inner",prev:framePtr,filename:"jsffi.nim",line:0};
			framePtr = F;
			BeforeRet: do {
				F.line = 430;
				var a_178165 = null;
				F.line = 431;
				a_178165 = {};
				F.line = 450;
				result_178164 = a_178165;
				break BeforeRet;
			} while (false);
			framePtr = F.prev;

			return result_178164;

		}

	var F={procname:"client.:anonymous",prev:framePtr,filename:"client.nim",line:0};
	framePtr = F;
		F.line = 30;
		var game_functions_178179 = inner_178162();
		F.line = 31;
		game_functions_178179.preload = preload_game_177041;
		F.line = 32;
		game_functions_178179.create = create_game_177074;
		F.line = 33;
		game_functions_178179.render = render_game_177132;
		F.line = 34;
		game_functions_178179.update = update_game_177147;
		F.line = 35;
		game = new Phaser.Game("100", "100", Phaser.AUTO, "", game_functions_178179);
		F.line = 37;
		var socket_178233 = socketCluster.connect();
		socket_178233.on(("error"), (throw_176085));
		socket_178233.on(("connect"), (on_connect_178060));
		socket_178233.on(("rand"), (on_random_message_178119));
		F.line = 42;
		var sample_channel_178289 = socket_178233.subscribe(("sample"));
		sample_channel_178289.on(("subscribeFail"), (on_subscribe_fail_178075));
		sample_channel_178289.watch((on_sample_channel_178097));
	framePtr = F.prev;

	
}
window.onload = HEX3Aanonymous_178144;
